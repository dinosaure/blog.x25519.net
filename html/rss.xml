<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>x25519.net</title>
<description>x25519.net</description>
<link>https://blog.x25519.net/</link>
<lastBuildDate>Sat, 14 Mar 2020 17:34:07 +0100</lastBuildDate>
<item>
  <title>Eq(af), timing attack!</title>
  <description><![CDATA[
</div><div class="post-date"><2020-03-14></div><p>
The MirageOS project is aware about security issues. This goal is strong when,
at the beginning, the idea of a small <i>unikernel</i> can ensure (by intuition) a
small attack surface. By this way, we want to follow as possible as we can
improvements into security stacks such as TLS.
</p>

<p>
Of course, we are not a huge team and some of us don't have a strong knowledge
about security. This topic is highly complex and it's easy to think that we are
secure - and, by facts, we are not. However, it gives to us an opportunity to
learn and improve what we can find about this topic and go on our way to try to
provide the best as we can.
</p>

<p>
This article wants to show a little project which wants to solve a security
issue, the timing attack. We will see what we did on this purpose at the
beginning and recently to be able to improve <a href="https://github.com/mirage/mirage-crypto/">mirage-crypto</a>.
</p>

<div id="outline-container-orgbe91f22" class="outline-2">
<h2 id="orgbe91f22">A timing attack!</h2>
<div class="outline-text-2" id="text-orgbe91f22">
<p>
It's clearly not an usual attack for me and I did not (yet!) understand in which
way it's possible to use this side-channel attack over a complex black-box such
as an SMTP service. However, the first lesson about security is to agree with
the fact that when you can imagine this attack (even if, by your technical
means, it's not possible), someone else into our world has the ability to use
this attack.
</p>

<p>
The point is not to try to think how this kind of attack is possible but to
assert that this attack <b><b>is</b></b> possible.
</p>

<p>
The timing attack is in this case where we use the time to try to introspect
data such as a password. The idea is simple, we can take this simple <code>equal</code>
function:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">equal</span><span class="org-variable-name"> s1 s2</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">res</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-builtin">ref</span> <span class="org-constant">true</span> <span class="org-tuareg-font-lock-governing">in</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">idx</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-builtin">ref</span> <span class="org-highlight-numbers-number">0</span> <span class="org-tuareg-font-lock-governing">in</span>
  <span class="org-keyword">if</span> <span class="org-tuareg-font-lock-module">String.</span>length s1 <span class="org-tuareg-font-lock-operator">&lt;&gt;</span> <span class="org-tuareg-font-lock-module">String.</span>length s2
  <span class="org-keyword">then</span> <span class="org-constant">false</span>
  <span class="org-keyword">else</span>
    <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span> <span class="org-keyword">while</span> <span class="org-tuareg-font-lock-operator">!</span>idx <span class="org-tuareg-font-lock-operator">&lt;</span> <span class="org-tuareg-font-lock-module">String.</span>length s1 <span class="org-tuareg-font-lock-operator">&amp;&amp;</span> <span class="org-tuareg-font-lock-operator">!</span>res
      <span class="org-keyword">do</span> res <span class="org-tuareg-font-lock-operator">:=</span> s1.<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">[</span></span><span class="org-tuareg-font-lock-operator">!</span>idx<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">]</span></span> <span class="org-tuareg-font-lock-operator">=</span> s2.<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">[</span></span><span class="org-tuareg-font-lock-operator">!</span>idx<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">]</span></span> <span class="org-tuareg-font-lock-operator">;</span> incr idx <span class="org-keyword">done</span> <span class="org-tuareg-font-lock-operator">;</span> <span class="org-tuareg-font-lock-operator">!</span>res <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>

<p>
If we are in the case where we want to compare the given password by the user
and the password stored into our database (or their hashes), we will use this
function - and allow the user to enter into a <i>secured</i> area.
</p>

<p>
However, we can see that the time spent by <code>equal</code> depends on given inputs <code>s1</code>
and <code>s2</code>.
</p>
</div>

<div id="outline-container-org20f2cd1" class="outline-3">
<h3 id="org20f2cd1">The worst case.</h3>
<div class="outline-text-3" id="text-org20f2cd1">
<p>
Imagine that the atomic operation <code>s1.[!idx]</code> (or <code>s2.[!idx]</code>) spend 1 second
(like 1 <i>CPU tick</i>). So, for each iteration into our loop, we will spend 2
seconds <i>while <code>!res</code> still is <code>true</code></i>. That means when we meet 2 different
bytes, we leave the loop<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>.
</p>

<p>
Now, imagine we have these values:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-operator">#</span> equal <span class="org-string">"aabb"</span> <span class="org-string">"aaaa"</span> <span class="org-tuareg-font-double-colon">;;</span>
</pre>
</div>

<p>
We can easily infer that this function will spend 6 seconds (2 seconds for first
characters, 2 seconds for second characters, 2 seconds for third characters and
we leave the loop). And about equal values such as:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-operator">#</span> equal <span class="org-string">"toto"</span> <span class="org-string">"toto"</span> <span class="org-tuareg-font-double-colon">;;</span>
</pre>
</div>

<p>
We will spend 8 seconds (and return <code>true</code>). The time needed to compute the
<code>equal</code> function depends on given inputs. By this way, if we observe time needed
to be authenticated from a <i>login</i> page, we can infer values given into the
<code>equal</code> function.
</p>

<p>
Finally, from that fact, imagine that <code>s1</code> is the given password by us and <code>s2</code>
is the password stored into our database, we can infer just with the time if we
are close to be equal to the password stored into our database.
</p>
</div>
</div>

<div id="outline-container-org4a2a402" class="outline-3">
<h3 id="org4a2a402">A smart brute-force attack.</h3>
<div class="outline-text-3" id="text-org4a2a402">
<p>
So now we can imagine a tool which will try all possibilities. It will record
times spent for each random inputs. Then, when it appears that from an input
<code>t0</code>, time spent differs (is lower than) from an input <code>t1</code>, we can imply that
our <code>equal</code> function go a bit further when it scanned our input <code>t1</code> (than
<code>t0</code>).
</p>

<p>
By this fact, we can imply that <code>t1</code> is more close to the expected password than
<code>t0</code> and we can redo the same operation but with a new base <code>t1</code> - and by this
way, discard all others next (and useless) possibilities with <code>t0</code> as a base.
</p>

<p>
Eq(af) gives to you an example of this attack. Of course, we plugged into our
operations an <code>Unix.sleep</code> to be able to see a real difference when we call our
<code>equal</code> function. Finally, the result is pretty good:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ dune exec attack/attack.exe
Random: <span class="org-rainbow-delimiters-depth-1">[</span>|<span class="org-highlight-numbers-number">253</span>;<span class="org-highlight-numbers-number">164</span>;<span class="org-highlight-numbers-number">168</span>;<span class="org-highlight-numbers-number">66</span>;<span class="org-highlight-numbers-number">47</span>;<span class="org-highlight-numbers-number">219</span>;<span class="org-highlight-numbers-number">88</span>;<span class="org-highlight-numbers-number">152</span>;<span class="org-highlight-numbers-number">128</span>;<span class="org-highlight-numbers-number">242</span>;<span class="org-highlight-numbers-number">216</span>;<span class="org-highlight-numbers-number">123</span>;|<span class="org-rainbow-delimiters-depth-1">]</span>.
<span class="org-highlight-numbers-number">7c8ceadc51d33cadc97cce73fc7c86a1</span>
<span class="org-highlight-numbers-number">7c8ceadc51d33cadc97cce73fc7c86a1</span>
</pre>
</div>

<p>
The second line is the expected hash, the third line is the hash found only by
an introspection of the time. The first line is the seed given by the random to
be able to replicate the result. This tool does not work all the time!
</p>
</div>
</div>
</div>

<div id="outline-container-orgbcb0c7a" class="outline-2">
<h2 id="orgbcb0c7a">Too deep to be dangerous?</h2>
<div class="outline-text-2" id="text-orgbcb0c7a">
<p>
Of course, into the real world, our <code>equal</code> function is much much much more fast
than some seconds. However, even if it can be hard to track how long <code>equal</code>
spend, it's not impossible. I mean, it's a bit hard but a way exists to know how
long any function spend.
</p>

<p>
This way is the <i>micro</i>-benchmark! Of course, when you want to compare speed of
your functions, you introspect time! So if we can do that usually to check which
function is faster than the other, we can apply the idea of the benchmark on two
call of the same <code>equal</code> function but with different inputs.
</p>
</div>

<div id="outline-container-orgd0f65c9" class="outline-3">
<h3 id="orgd0f65c9">Eq(af) does the test for you</h3>
<div class="outline-text-3" id="text-orgd0f65c9">
<p>
So, our distribution comes with a little benchmark tool which wants to see how
long <code>equal</code> spend when we give to it 2 different values and 2 equal values.
Then, we <i>extrapolate</i> results.
</p>

<p>
We <i>run</i> this function 1 time, 2 times, 3 times, &#x2026; to 3000 times and we record
times for each run. From that, we are able to plot a curve. So about expected
results:
</p>

<ul class="org-ul">
<li>If our curve is a line, that means for each <i>run</i>, we spend the same time
whatever inputs.</li>
</ul>


<figure id="org2fd85e4">
<img src="static/eqaf_01.png" alt="eqaf_01.png">

<figcaption><span class="figure-number">Figure 1: </span>A good curve</figcaption>
</figure>

<ul class="org-ul">
<li>If our curves is not exactly a line, that means time spent depends on inputs</li>
</ul>


<figure id="org222f410">
<img src="static/eqaf_02.png" alt="eqaf_02.png">

<figcaption><span class="figure-number">Figure 2: </span>A bad curve</figcaption>
</figure>

<p>
So from this curve, we apply a <i>linear-regression</i> to see if it's a line or not.
From that, we can get a <code>R²</code> which is a regression coefficient and it tells to
us if it's a <i>true</i> line (where <code>R² &gt;= 0.99</code>) or not.
</p>

<p>
As you can see, we have some noises (some points are not strictly aligned) -
it's because the inherent volatility when we want to record the time. It's why
we need to apply a <i>linear-regression</i> to delete as much as possible this noise.
An other factor about that is the context where you execute your function, the
scheduler can decide to stop our <code>equal</code> function and do something else (but our
<code>equal</code> function still spends his time). Finally, it still is hard to track the
time.
</p>
</div>
</div>
</div>

<div id="outline-container-orgc5c8733" class="outline-2">
<h2 id="orgc5c8733">How to fix it?</h2>
<div class="outline-text-2" id="text-orgc5c8733">
<p>
The easiest way to avoid this side-channel attack is to spend exactly the same
time for any inputs. At the end, even if we encounter different bytes, we will
continue to scan inputs.
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">equal</span><span class="org-variable-name"> s1 s2</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-keyword">if</span> <span class="org-tuareg-font-lock-module">String.</span>length s1 <span class="org-tuareg-font-lock-operator">&lt;&gt;</span> <span class="org-tuareg-font-lock-module">String.</span>length s2 <span class="org-keyword">then</span> <span class="org-constant">false</span>
  <span class="org-keyword">else</span>
    <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span> <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">res</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-builtin">ref</span> <span class="org-constant">true</span> <span class="org-tuareg-font-lock-governing">in</span>
      <span class="org-keyword">while</span> <span class="org-tuareg-font-lock-operator">!</span>idx <span class="org-tuareg-font-lock-operator">&lt;</span> <span class="org-tuareg-font-lock-module">String.</span>length s1
      <span class="org-keyword">do</span> res <span class="org-tuareg-font-lock-operator">:=</span> s1.<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">[</span></span><span class="org-tuareg-font-lock-operator">!</span>idx<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">]</span></span> <span class="org-tuareg-font-lock-operator">=</span> s2.<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">[</span></span><span class="org-tuareg-font-lock-operator">!</span>idx<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">]</span></span> <span class="org-tuareg-font-lock-operator">&amp;&amp;</span> <span class="org-tuareg-font-lock-operator">!</span>res <span class="org-keyword">done</span> <span class="org-tuareg-font-lock-operator">;</span>
      <span class="org-tuareg-font-lock-operator">!</span>res <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>
</div>

<div id="outline-container-org10027f7" class="outline-3">
<h3 id="org10027f7">Into the OCaml side!</h3>
<div class="outline-text-3" id="text-org10027f7">
<p>
However, into the OCaml world, the deal can be much more complex that what we
can imagine. Even if it's <i>easy</i> to translate an OCaml code to an assembly code,
the compiler can emit some <i>jump</i> and produce a <i>non constant-time</i> (or
a non <i>branch-less</i>) function at the end.
</p>

<p>
For example, in our example, the only idea to use <code>None</code> and <code>Some</code> instead
<code>false</code> and <code>true</code> into our code implies a call to the garbage collector - and a
<i>jump</i> in the emitted assembly. This case appear when we want to implement
<code>compare</code> and keep somewhere (into our <code>int option</code>) the subtraction of
different bytes while the loop.
</p>

<p>
Into Eq(af), we did a huge introspection about the assembly generated to ensure
that we don't have any <i>jump</i> and any assembly instructions will be executed
regardless inputs - and only from that we can say that our function is
<i>constant-time</i><sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>.
</p>
</div>
</div>
</div>

<div id="outline-container-orgdcf7271" class="outline-2">
<h2 id="orgdcf7271">Conclusion</h2>
<div class="outline-text-2" id="text-orgdcf7271">
<p>
Eq(af) provides a quite easy function and anybody can re-implement it. But it
comes with tools which want to check our assumption, the time spent can not leak
any information. Or course, as we showed, it can be hard to check that.
</p>

<p>
We have different tools to check/prove that where, at this time, we only do a
check but we can go further by an introspection of the emitted code by an other
tool to see if are surely <i>branch-less</i>.
</p>

<p>
At the end, Eq(af) is used by some people who are aware about security issues
and it's why we decided to use it as a default into <a href="https://github.com/mirage/digestif/">digestif</a> to protect any
users from this side-channel attack.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
: In C, the case appears when we <code>return false</code> directly which is a jump
and leaves the loop as we do in OCaml.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
: <i>constant-time</i> is not a good word where it can have an other
signification when we talk about complexity and algorithm. And it's not really
true when the time still depends on the length of the given input.
</p></div></div>


</div>
</div>]]></description>
  <link>https://blog.x25519.net/2020-03-14--eqaf-release.html</link>
  <pubDate>Sat, 14 Mar 2020 01:00:00 +0100</pubDate>
</item>
<item>
  <title>Tuyau, the next conduit</title>
  <description><![CDATA[
</div><div class="post-date"><2020-02-27></div><p>
If you look into the MirageOS ecosystem, you should already see <a href="https://github.com/mirage/ocaml-conduit.git">conduit</a> as a
library used by many others projects such as <a href="https://github.com/mirage/ocaml-cohttp.git">cohttp</a>. However, even if it is used
by these projects, at this time, nobody can really explain the goal of Conduit.
</p>

<p>
Conduit wants to solve 2 problems:
</p>
<ul class="org-ul">
<li>Start a <i>transmission</i> from an URI or, more generally, an <i>endpoint</i></li>
<li>Be able to compose <i>protocols</i></li>
</ul>

<p>
At this stage, it's mostly a pain to use Conduit for several reasons. But one of
them is the lack of documentation. Conduit still exists because people
copy/paste some piece of codes available in some projects.
</p>

<p>
However, to understand how Conduit can resolve your URI and give you a way to
communicate to your peer, nobody understands how to extend it, how to trace it
and finally how to use it.
</p>

<p>
From that, one year ago (at the MirageOS retreat), we decided to make a new
version of Conduit: Tuyau (french word for a <i>pipe</i>). Of course, we don't want
to repeat errors of the past. This article want to describe Conduit, and, by
this way, Tuyau.
</p>

<p>
It can be a good opportunity to see some strange OCaml things!
</p>

<div id="outline-container-org2cc56df" class="outline-2">
<h2 id="org2cc56df">Start a <i>transmission</i></h2>
<div class="outline-text-2" id="text-org2cc56df">
<p>
In many ways, in some projects, we want to start a <i>transmission</i> with a peer.
We would like to communicate with it. However, we don't want to handle by hands
details to start this transmission. We can take an easy example with <a href="https://github.com/mirage/ocaml-git.git">ocaml-git</a>.
</p>

<p>
When we want to push/pull to an other peer, we have 4 possibilities:
</p>
<ul class="org-ul">
<li>Use directly the Smart (Git) protocol over TCP/IP
It appears when you do: <code>git clone git://host/repo</code></li>
<li>Use the Smart (Git) protocol over SSH
It's the usual case when you do: <code>git clone git@host:repo</code></li>
<li>Use the Smart (Git) protocol over HTTP
It's when you do: <code>git clone http://host/repo</code></li>
<li>And final case is over HTTP + TLS or, in other words, HTTPS
<code>git clone https://host/repo</code></li>
</ul>

<p>
For all of these cases, we use systematically the same Smart protocol to
communicate with a peer<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>. So we should abstract all of these cases behind
something like a common interface.
</p>

<p>
Another aspect is from the point of view of the maintainer of Git:
</p>
<ul class="org-ul">
<li>we don't want to depend on all of these protocols</li>
<li>it's sane to not be aware about underlying implementation</li>
</ul>

<p>
The first point is really important. Git is only about Git and we should not
depend on a specific implementation of HTTP or a specific implementation of SSH.
The current version of Git did the choice to use Curl to be able to communicate
with the HTTP protocol. We should be able to be abstracted from that in OCaml
and let the user to choose which implementation of HTTP he wants.
</p>

<p>
The best is to start a transmission and let the user, at another layer, to
<i>feed</i> something which aggregate implementation of protocols. By this way, we
can let the user to <i>feed</i> Tuyau <b>only</b> with an SSH implementation and, by this
way, ensure that Git will start a <i>transmission</i> only with SSH.
</p>

<p>
The second point is not really valid when we can argue some security points. As
a maintainer, we would be able to enforce a transmission over TLS for example.
But we will see later how we can solve that into Tuyau.
</p>

<p>
Finally, we want something like:
</p>

<div class="org-src-container">
<pre class="src src-ocaml" id="org21254c0"><span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">resolve</span> <span class="org-tuareg-font-lock-operator">:</span> <span class="org-tuareg-font-lock-module">Tuyau.</span>t <span class="org-tuareg-font-lock-operator">-&gt;</span> uri <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-module">Unix.</span>socket
</pre>
</div>

<p>
Where <code>Unix.socket</code> is already connected to our peer. Then, we can start to
<code>Unix.read</code> and <code>Unix.write</code> on the given socket and speak with the Smart
protocol to our peer.
</p>

<p>
<code>Tuyau.t</code> represents globally our possibilities (our available protocols). At
least, the user should depend on that - but it does not imply a dependence to
implementation of available protocols.
</p>
</div>
</div>

<div id="outline-container-orga644f4b" class="outline-2">
<h2 id="orga644f4b">A transmission, a protocol or a flow</h2>
<div class="outline-text-2" id="text-orga644f4b">
<p>
The first bad point of Conduit is terms used by it which are not really defined.
A transmission, a protocol or a flow are not very clear and we can not strictly
define the purpose of them with Conduit.
</p>

<p>
Tuyau wants to be clear on these words and it gives to us a true definition of
them. Then, we will use them as Tuyau defines them.
</p>
</div>

<div id="outline-container-orgdfc4565" class="outline-3">
<h3 id="orgdfc4565">A Protocol</h3>
<div class="outline-text-3" id="text-orgdfc4565">
<p>
A communication protocol is a system of rules that allows entities to transmit
information. In the case of Tuyau, this kind of information must not be
arbitrary. The protocol should only solve communication problems such as
<i>routing</i>.
</p>

<p>
When we talk about a protocol, it's only about a standard which is able to
transmit a <i>payload</i>. Interpretation of the <i>payload</i> is not done by the
<i>protocol</i> but by the user of this library.
</p>

<p>
For example, the Transmission Control Protocol (TCP) <b>is</b> a protocol according
to Tuyau because it is able to transmit <i>payload</i> without interpreting it. A
counter example is the Simple Mail Transfer Protocol (SMTP) which gives an
interpretation of the <i>payload</i> (such as <code>EHLO</code> which is different to <code>QUIT</code>).
</p>

<p>
This difference is important to unlock the ability to compose <i>protocols</i>. An
other protocol according to Tuyau is Transport Layer Security (TLS) - which
wants to solve privacy and data integrity. Tuyau is able to compose protocols
together like TCP ∘ TLS to make a new protocol. From this composition, the user
is able to implement Secure Simple Mail Transfer Protocol (SSMTP) or HyperText
Transfer Protocol Secure (HTTPS) - both use TCP and TLS.
</p>
</div>
</div>

<div id="outline-container-org20ea808" class="outline-3">
<h3 id="org20ea808">A <code>FLOW</code></h3>
<div class="outline-text-3" id="text-org20ea808">
<p>
To be able to do this composition, the protocol must respect (at least) an
interface: the <code>FLOW</code> interface. It defines an abstract <code>type t</code> and functions
like <code>recv</code> or <code>send</code>. These functions give to us the <i>payload</i>. Rules to solve
communication problems are already processed internally.
</p>

<p>
In other terms, from a given <code>FLOW</code>, the user should not handle <i>routing</i>,
privacy or data integrity (or some others problems). The user should only be
able to process the <i>payload</i>.
</p>

<p>
Finally, representation of a TCP protocol is a <code>FLOW</code>. VCHAN protocol or User
Datagram Protocol (UDP) can be represented as a <code>FLOW</code>. However, TLS is not a
flow as is but <i>a layer</i> on top of another protocol/~FLOW~. Composition with it
should look like:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">with_tls</span> <span class="org-tuareg-font-lock-operator">:</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">FLOW</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">FLOW</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>

<p>
From a given <code>FLOW</code>, we <i>wrap</i> it with TLS and return a new <code>FLOW</code>. Such a
composition exists also for <a href="https://en.wikipedia.org/wiki/WireGuard">WireGuard</a> or <a href="http://www.noiseprotocol.org/">Noise</a> layers. Tuyau wants to solve
this composition by a strict OCaml interface of the <code>FLOW</code>.
</p>
</div>
</div>

<div id="outline-container-org16d626b" class="outline-3">
<h3 id="org16d626b">About Conduit</h3>
<div class="outline-text-3" id="text-org16d626b">
<p>
These ideas already exist with <code>Conduit_mirage.Flow</code> and
<code>Conduit_mirage.with_tls</code>. However, it appears 2 problems:
</p>
<ul class="org-ul">
<li>extension of implementations</li>
<li>composition with user-defined <code>FLOW</code></li>
</ul>

<p>
Currently, Conduit delimits implementations by a polymorphic variants
<code>Conduit.{client,server}</code>. We should not blame that when <a href="https://caml.inria.fr/pub/docs/manual-ocaml/extensiblevariants.html">extensible variants</a>
appears only on OCaml 4.02.
</p>
</div>
</div>
</div>

<div id="outline-container-org1077c90" class="outline-2">
<h2 id="org1077c90">Abstract! Abstract everything!</h2>
<div class="outline-text-2" id="text-org1077c90">
<p>
As we said, the most important idea is to be able to:
</p>
<ol class="org-ol">
<li>abstract the <i>flow</i></li>
<li>still be able to use it to receive and send <i>payload</i></li>
</ol>

<p>
In your first example, we return an <code>Unix.socket</code> which is obviously not good,
especially if we want to make an <i>unikernel</i> (which can not usually have
anythings from the <code>Unix</code> module). In this way, we already did an interface to
be able to easily abstract our implementations: <a href="https://github.com/mirage/mirage-flow">mirage-flow</a>.
</p>

<p>
We say that any protocols like TCP or VCHAN can be described with this interface
where we have the <code>recv</code> function and the <code>send</code> function. So, instead to return
a concrete type, we return an abstract type like:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-governing">type</span> <span class="org-tuareg-font-lock-module">FLOW</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-governing">sig</span>
  <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span>

  <span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">recv</span> <span class="org-tuareg-font-lock-operator">:</span> t <span class="org-tuareg-font-lock-operator">-&gt;</span> bytes <span class="org-tuareg-font-lock-operator">-&gt;</span> int
  <span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">send</span> <span class="org-tuareg-font-lock-operator">:</span> t <span class="org-tuareg-font-lock-operator">-&gt;</span> string <span class="org-tuareg-font-lock-operator">-&gt;</span> unit
<span class="org-tuareg-font-lock-governing">end</span>

<span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">flow</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-constructor">Flow</span> <span class="org-tuareg-font-lock-operator">:</span> 'flow <span class="org-tuareg-font-lock-operator">*</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">FLOW</span> <span class="org-tuareg-font-lock-governing">with type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> 'flow<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> <span class="org-tuareg-font-lock-operator">-&gt;</span> flow
<span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">resolve</span> <span class="org-tuareg-font-lock-operator">:</span> <span class="org-tuareg-font-lock-module">Tuyau.</span>t <span class="org-tuareg-font-lock-operator">-&gt;</span> uri <span class="org-tuareg-font-lock-operator">-&gt;</span> flow

<span class="org-tuareg-font-lock-governing">let</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">()</span></span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-tuareg-font-lock-constructor">Flow</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-variable-name">flow</span><span class="org-tuareg-font-lock-operator">,</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">(</span></span><span class="org-tuareg-font-lock-governing">module</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-module">Flow</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">)</span></span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> <span class="org-tuareg-font-lock-operator">=</span>
    resolve tuyau <span class="org-string">"https://google.fr/"</span> <span class="org-tuareg-font-lock-governing">in</span>
  <span class="org-tuareg-font-lock-module">Flow.</span>send flow <span class="org-string">"Hello World!"</span>
</pre>
</div>

<p>
In our example, we use a GADT to keep the type equality between our value
<code>'flow</code> and the <code>type t</code> of our module <code>Flow</code>. We usually call it an
<i>existential type wrapper</i>. It allows us to <i>create</i> a new type <code>'flow</code> and
associate it to an implementation <code>Flow</code>.
</p>

<p>
The idea behind is: the <code>type t</code> can concretely be anything. It can be an
<code>Unix.socket</code> if we want to make an <i>unikernel</i> for Unix but it can be something
else like a <code>Tcpip_stack_direct.t</code> (the TCP/IP implementation usually used by
MirageOS).
</p>

<p>
With the associated module, we still continue to be able to read and write
something as we can do with an <code>Unix.socket</code>.
</p>

<p>
And of course, we can forget about details. You can denote that we already
prepare the concrete value to be able to communicate with our peer. I mean,
<code>resolve</code> do something more complex than just create a new resource such as an
<code>Unix.socket</code>. It connects the socket to our peer. It's why we talk about
a <i>resolution</i> process.
</p>
</div>
</div>

<div id="outline-container-org21687a2" class="outline-2">
<h2 id="org21687a2">Resolution</h2>
<div class="outline-text-2" id="text-org21687a2">
<p>
Tuyau can not define by itself the resolution. Resolution is commonly a DNS
resolution to get the IP from a <i>domain-name</i>. However, into an <i>unikernel</i>,
nothing ensures that we properly have a DNS resolver (such as our
<code>/etc/resolv.conf</code>).
</p>

<p>
In other side, definition of an <i>endpoint</i> can not fully exist where it depends
on the returned <code>'flow</code>. For example, if we give to you a TCP/IP <code>Flow</code>, used
<i>endpoint</i> to connect your <code>'flow</code> should be an IP and a <i>port</i>. However, the
<i>endpoint</i> can represent something else like a <i>serial-port</i> connected to our
MirageOS or a virtual network kernel interface (TUN/TAP), etc. Finally,
definition of an <i>endpoint</i> is <b>intrinsic</b> to our implementation of the <code>Flow</code>.
</p>

<p>
Concretely, for an <code>Unix.socket</code> flow, we need an <code>Unix.sockaddr</code>. For a
<code>Tcpip_stack_direct.t</code> flow, we need an <code>Ipaddr.V4.t</code> and an <code>int</code> as a <i>port</i>.
</p>

<p>
At the end, we agree that the most general (by convention) description of the
<i>endpoint</i> is the <i>domain-name</i>. By knowing that, we decided to let the user to
construct an <i>endpoint</i> from a concrete <code>[`host] Domain_name.t</code> (as Conduit
decided to construct an <code>Conduit.endp</code> from an <code>Uri.t</code>).
</p>
</div>

<div id="outline-container-org0400bb9" class="outline-3">
<h3 id="org0400bb9">How Conduit does that?!</h3>
<div class="outline-text-3" id="text-org0400bb9">
<p>
Conduit do the same job where it wants to construct an <i>endpoint</i>
(<code>Conduit.endp</code>) from an <code>Uri.t</code>. To choose which implementation we will use, it
looks at the <i>scheme</i> of the <code>Uri.t</code>.
</p>

<p>
From our perspectives, this is not a good choice where the <i>scheme</i> is not a
real definition of the underlying protocol used as it's explained into the
<a href="https://tools.ietf.org/html/rfc7595#section-3.8">RFC7595</a>:
</p>

<blockquote>
<p>
A scheme name is not a "protocol."
</p>
</blockquote>

<p>
However, even if <code>Conduit.endp</code> should be extensible as
<code>Conduit.{client,server}</code> (because they are <b>intrinsic</b> each other), they still
are delimited by an exhaustive list of constructors:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">endp</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">[</span></span> <span class="org-tuareg-font-lock-constructor">`TCP</span> <span class="org-keyword">of</span> <span class="org-tuareg-font-lock-module">Ipaddr.</span>t <span class="org-tuareg-font-lock-operator">*</span> int
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-tuareg-font-lock-constructor">`Unix_domain_socket</span> <span class="org-keyword">of</span> string
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-tuareg-font-lock-constructor">`Vchan_direct</span> <span class="org-keyword">of</span> int <span class="org-tuareg-font-lock-operator">*</span> string
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-tuareg-font-lock-constructor">`Vchan_domain_socket</span> <span class="org-keyword">of</span> string <span class="org-tuareg-font-lock-operator">*</span> string
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-tuareg-font-lock-constructor">`TLS</span> <span class="org-keyword">of</span> string <span class="org-tuareg-font-lock-operator">*</span> endp <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">]</span></span>

<span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">client</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">[</span></span> tcp_client <span class="org-tuareg-font-lock-operator">|</span> vchan_client <span class="org-tuareg-font-lock-operator">|</span> client tls_client <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">]</span></span> 
</pre>
</div>
</div>
</div>

<div id="outline-container-org28294f3" class="outline-3">
<h3 id="org28294f3">Abstract, again!</h3>
<div class="outline-text-3" id="text-org28294f3">
<p>
Tuyau comes with an <a href="https://github.com/dbuenzli/hmap"><i>heterogeneous</i> map</a> to be able to let the user to define a
<code>resolve</code> function which is able to return any (structurally different)
<i>endpoint</i>. The user must create a <i>type witness</i> which corresponds to a value
<code>'t Tuyau.key</code> and represents type of the <i>endpoint</i>.
</p>

<p>
With that, the user can <i>register</i> a <code>resolve</code> function which returns the same
type as your <code>'t Tuyau.key</code>. In others words, we are able to provide:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">resolvers</span>
<span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">'t key</span>

<span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">key</span> <span class="org-tuareg-font-lock-operator">:</span> <span class="org-tuareg-font-lock-label">name</span><span class="org-tuareg-font-lock-operator">:</span>string <span class="org-tuareg-font-lock-operator">-&gt;</span> 't key
<span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">register</span>
  <span class="org-tuareg-font-lock-operator">:</span>  <span class="org-tuareg-font-lock-label">key</span><span class="org-tuareg-font-lock-operator">:</span>'t key
  <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">[</span></span> <span class="org-tuareg-font-lock-constructor">`host</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">]</span></span> <span class="org-tuareg-font-lock-module">Domain_name.</span>t <span class="org-tuareg-font-lock-operator">-&gt;</span> 't<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
  <span class="org-tuareg-font-lock-operator">-&gt;</span> resolvers
  <span class="org-tuareg-font-lock-operator">-&gt;</span> resolvers
</pre>
</div>

<p>
By this way, the user is able to implement the resolution process and can use a
DNS resolver or a fixed resolution table (like an <code>Hashtbl.t</code>). Tuyau needs to
know who can create a concrete <i>endpoint</i> from a <code>[ `host ] Domain_name.t</code> to
pass it to a protocol implementation. It's why you need to register your
<code>resolve</code> function into our <code>resolvers</code>.
</p>

<p>
Finally, Tuyau will execute all of your <i>resolvers</i> and create a list of
heterogeneous <i>endpoints</i>. Then, from them, it is able to try to start a
transmission to your peer.
</p>
</div>

<div id="outline-container-org021f26d" class="outline-4">
<h4 id="org021f26d">Give me the priority</h4>
<div class="outline-text-4" id="text-org021f26d">
<p>
Of course, <code>resolver</code> can be registered with a priority. By that, not only will
we use your priority resolver, but we will also prioritize initialization of
your associated protocol.
</p>

<p>
The idea is to let the user to prioritize secure transmission over <i>unsecure</i>
transmission even if both are available (like <code>https</code> and <code>http</code>).
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-org5f3f18d" class="outline-2">
<h2 id="org5f3f18d">Tuyau by an example</h2>
<div class="outline-text-2" id="text-org5f3f18d">
<p>
Tuyau (and Conduit) wants to solve a difficult task which does not appear into
usual cases. If you want to make an UNIX program, all of that is useless because
we can directly use the UNIX environment.
</p>

<p>
However, for MirageOS where nothing exists (even a DNS resolver), we need a way
to start a transmission according to the context of the compilation. In fact,
the TCP/IP implementation depends on the target, the configuration of your
<i>unikernel</i>, what the user wants, etc.
</p>

<p>
We will see a little example to fully understand the underlying Tuyau stack.
What you should do as the maintainer of Git, as the developer of the protocol or
basically as the user of Tuyau.
</p>
</div>

<div id="outline-container-org8f4860c" class="outline-3">
<h3 id="org8f4860c">Register your protocol with Tuyau</h3>
<div class="outline-text-3" id="text-org8f4860c">
<p>
To play with protocols, we must <i>register</i> our protocol to Tuyau. The
registration is global to your program. Indeed, Tuyau is able to extract your
implementation from anywhere - internally, we save it into a global <code>Hashtbl.t</code>.
</p>

<p>
Let's start to provide an UNIX TCP/IP protocol and register it into Tuyau!
</p>

<div class="org-src-container">
<pre class="src src-ocaml" id="org4f8e63f"><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">TCP</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-governing">struct</span>
  <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">flow</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Unix.</span>file_descr
  <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">endpoint</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Unix.</span>sockaddr

  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">make</span><span class="org-variable-name"> sockaddr</span> <span class="org-tuareg-font-lock-operator">=</span>
    <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">socket</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Unix.</span>socket <span class="org-tuareg-font-lock-module">Unix.</span><span class="org-tuareg-font-lock-constructor">PF_INET</span> <span class="org-tuareg-font-lock-module">Unix.</span><span class="org-tuareg-font-lock-constructor">SOCK_STREAM</span> <span class="org-tuareg-font-lock-governing">in</span>
    <span class="org-tuareg-font-lock-module">Unix.</span>connect socket sockaddr <span class="org-tuareg-font-lock-operator">;</span> socket

  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">recv</span><span class="org-variable-name"> socket buf off len</span> <span class="org-tuareg-font-lock-operator">=</span>
    <span class="org-tuareg-font-lock-module">Unix.</span>read socket buf off len

  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">send</span><span class="org-variable-name"> socket buf</span> <span class="org-tuareg-font-lock-operator">=</span>
    <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">len</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">String.</span>length buf <span class="org-tuareg-font-lock-governing">in</span>
    <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">_</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Unix.</span>write socket <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Bytes.</span>unsafe_of_string buf<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> <span class="org-highlight-numbers-number">0</span> len
    <span class="org-tuareg-font-lock-governing">in</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">()</span></span>

  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">close</span><span class="org-variable-name"> socket</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Unix.</span>close socket
<span class="org-tuareg-font-lock-governing">end</span>
</pre>
</div>

<p>
We must provide these functions into our module and 2 types:
</p>
<ul class="org-ul">
<li>the <code>flow</code> type</li>
<li>the <code>endpoint</code> type</li>
</ul>

<p>
From that, Tuyau (a specialized version according to your <i>backend</i>) provides
a way to <i>register</i> your protocol globally. We must create our <i>type witness</i>
about our <i>endpoint</i> and associate it with your protocol:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">sockaddr</span> <span class="org-tuareg-font-lock-operator">:</span> <span class="org-tuareg-font-lock-module">Unix.</span><span class="org-type">sockadr </span><span class="org-tuareg-font-lock-module">Tuyau.</span><span class="org-type">key </span><span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Tuyau.</span>key <span class="org-tuareg-font-lock-label">~name</span><span class="org-tuareg-font-lock-operator">:</span><span class="org-string">"sockaddr"</span>
<span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">tcp</span> <span class="org-tuareg-font-lock-operator">:</span> <span class="org-tuareg-font-lock-module">Unix.</span><span class="org-type">file_descr </span><span class="org-tuareg-font-lock-module">Tuyau.</span><span class="org-type">protocol </span><span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-module">Tuyau.</span>register_protocol <span class="org-tuareg-font-lock-label">~key</span><span class="org-tuareg-font-lock-operator">:</span>sockaddr <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">TCP</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>

<p>
And it's enough! You probably should expose <code>sockaddr</code> and <code>tcp</code>. We will see
where we can use it. But the registration is done into our internal &amp; global
<code>Hashtbl.t</code>. Any <b><b>link</b></b> with this piece of code will make your protocol
available through Tuyau.
</p>
</div>
</div>

<div id="outline-container-org43097ab" class="outline-3">
<h3 id="org43097ab">Register your resolver with Tuyau</h3>
<div class="outline-text-3" id="text-org43097ab">
<p>
Into another project/library/executable/unikernel, you are able to define your
resolution process. Of course, you must link with <code>unix_tcp</code> to be able to use
<code>Unix_tcp.sockaddr</code> and register your <i>resolver</i> with this <i>type-witness</i> - and
it's why you should expose it into your interface.
</p>

<p>
Let's use an usual resolver:
</p>

<div class="org-src-container">
<pre class="src src-ocaml" id="org361d4bf"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">resolve_http</span><span class="org-variable-name"> domain_name</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-keyword">match</span> <span class="org-tuareg-font-lock-module">Unix.</span>gethostbyname <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Domain_name.</span>to_string domain_name<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> <span class="org-keyword">with</span>
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">{</span></span> <span class="org-tuareg-font-lock-module">Unix.</span>h_addr_list<span class="org-tuareg-font-lock-operator">;</span> _ <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">}</span></span> <span class="org-tuareg-font-lock-operator">-&gt;</span>
    <span class="org-keyword">if</span> <span class="org-tuareg-font-lock-module">Array.</span>length h_addr_list <span class="org-tuareg-font-lock-operator">&gt;</span> <span class="org-highlight-numbers-number">0</span>
    <span class="org-keyword">then</span> <span class="org-tuareg-font-lock-constructor">Some</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Unix.</span><span class="org-tuareg-font-lock-constructor">ADDR_INET</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">(</span></span>h_addr_list.<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-3">(</span></span><span class="org-highlight-numbers-number">0</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-3">)</span></span><span class="org-tuareg-font-lock-operator">,</span> <span class="org-highlight-numbers-number">80</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">)</span></span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
    <span class="org-keyword">else</span> <span class="org-tuareg-font-lock-constructor">None</span>
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-keyword">exception</span> _ <span class="org-tuareg-font-lock-operator">-&gt;</span> None
</pre>
</div>

<p>
This <i>resolver</i> wants to usually resolve a domain-name to an HTTP
endpoint<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>. Of course, you can use something else like <a href="https://github.com/mirage/ocaml-dns">ocaml-dns</a> instead
<code>Unix.gethostbyname</code> to be compatible with MirageOS.
</p>

<p>
Then, we must fill <code>Tuyau.resolvers</code> with our <code>resolve_http</code>:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">resolvers</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Tuyau.</span>empty
<span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">resolvers</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-module">Tuyau.</span>register_resolver <span class="org-tuareg-font-lock-label">~key</span><span class="org-tuareg-font-lock-operator">:</span><span class="org-tuareg-font-lock-module">Unix_tcp.</span>sockaddr resolve_http
</pre>
</div>

<p>
You can not do a mistake between <code>Unix_tcp.sockaddr</code> and <code>resolve_http</code>.
<i>type-witness</i> and returned value by <code>resolve_http</code> must correspond - otherwise,
OCaml will complain with a type error which is nice!
</p>
</div>
</div>

<div id="outline-container-org9a7451e" class="outline-3">
<h3 id="org9a7451e">Come back to Git!</h3>
<div class="outline-text-3" id="text-org9a7451e">
<p>
From the maintainer of Git's perspective, all of previous codes is outside Git.
As we said, we don't want to depend on an implementation of TCP/IP protocol (or
a SSH implementation). However, we should depend on Tuyau.
</p>

<p>
Finally, the Tuyau core library defines only few things, the <code>resolvers</code> type
and the <code>'a key</code> type. By this way, in our library we can write something like:
</p>

<div class="org-src-container">
<pre class="src src-ocaml" id="org5b29b3c"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">clone</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator">~</span><span class="org-variable-name">resolvers domain_name repository</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">payload</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Bytes.</span>create <span class="org-highlight-numbers-number">0x1000</span> <span class="org-tuareg-font-lock-governing">in</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-tuareg-font-lock-module">Tuyau_unix.</span><span class="org-tuareg-font-lock-constructor">Flow</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-variable-name">flow</span><span class="org-tuareg-font-lock-operator">,</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">(</span></span><span class="org-tuareg-font-lock-governing">module</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-module">Flow</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">)</span></span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> <span class="org-tuareg-font-lock-operator">=</span>
    <span class="org-tuareg-font-lock-module">Tuyau_unix.</span>resolve <span class="org-tuareg-font-lock-operator">~</span>resolvers domain_name <span class="org-tuareg-font-lock-governing">in</span>
  <span class="org-tuareg-font-lock-module">Flow.</span>send flow <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Fmt.</span>strf <span class="org-string">"# git-upload-pack /%s.git"</span> repository <span class="org-tuareg-font-lock-operator">;</span>
  <span class="org-tuareg-font-lock-module">Flow.</span>recv flow payload <span class="org-tuareg-font-lock-operator">;</span>
  <span class="org-tuareg-font-lock-operator">...</span> 
</pre>
</div>

<p>
Of course, we must choose a <i>backend</i> like LWT, ASYNC or UNIX to correctly deal
with the scheduler about I/O operations. But for a MirageOS-compatible library,
<code>Tuyau_lwt</code> should be enough.
</p>
</div>
</div>

<div id="outline-container-orge90f6fb" class="outline-3">
<h3 id="orge90f6fb">And run all of that!</h3>
<div class="outline-text-3" id="text-orge90f6fb">
<p>
Come back to our <code>main.ml</code> where we filled your <code>resolvers</code>, we properly can do:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">resolve_http</span><span class="org-variable-name"> domain_name</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-keyword">match</span> <span class="org-tuareg-font-lock-module">Unix.</span>gethostbyname <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Domain_name.</span>to_string domain_name<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> <span class="org-keyword">with</span>
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">{</span></span> <span class="org-tuareg-font-lock-module">Unix.</span>h_addr_list<span class="org-tuareg-font-lock-operator">;</span> _ <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">}</span></span> <span class="org-tuareg-font-lock-operator">-&gt;</span>
    <span class="org-keyword">if</span> <span class="org-tuareg-font-lock-module">Array.</span>length h_addr_list <span class="org-tuareg-font-lock-operator">&gt;</span> <span class="org-highlight-numbers-number">0</span>
    <span class="org-keyword">then</span> <span class="org-tuareg-font-lock-constructor">Some</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Unix.</span><span class="org-tuareg-font-lock-constructor">ADDR_INET</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">(</span></span>h_addr_list.<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-3">(</span></span><span class="org-highlight-numbers-number">0</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-3">)</span></span><span class="org-tuareg-font-lock-operator">,</span> <span class="org-highlight-numbers-number">80</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">)</span></span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
    <span class="org-keyword">else</span> <span class="org-tuareg-font-lock-constructor">None</span>
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-keyword">exception</span> _ <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-constructor">None</span>

<span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">resolvers</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Tuyau.</span>empty
<span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">resolvers</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-module">Tuyau.</span>register_resolver <span class="org-tuareg-font-lock-label">~key</span><span class="org-tuareg-font-lock-operator">:</span><span class="org-tuareg-font-lock-module">Unix_tcp.</span>sockaddr resolve_http

<span class="org-tuareg-font-lock-governing">let</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">()</span></span> <span class="org-tuareg-font-lock-operator">=</span>
  clone <span class="org-tuareg-font-lock-operator">~</span>resolvers
    <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Domain_name.</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">(</span></span>host_exn <span class="org-tuareg-font-lock-operator">&lt;.&gt;</span> of_string_exn<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">)</span></span> <span class="org-string">"github.com"</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
    <span class="org-string">"decompress"</span>
</pre>
</div>

<p>
Finally, we manually defined our <code>resolvers</code> by hands, we used a specific
implementation of the TCP/IP protocol (the UNIX one) and we
magically/dynamically plug all of that to your Git implementation through Tuyau.
</p>
</div>
</div>

<div id="outline-container-org84c5a9b" class="outline-3">
<h3 id="org84c5a9b">Go further with composition!</h3>
<div class="outline-text-3" id="text-org84c5a9b">
<p>
Of course, we can go further and provide a TCP + TLS implementation:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">sockaddr_and_tls_config</span><span class="org-tuareg-font-lock-operator">,</span><span class="org-variable-name"> tcp_with_tls</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-module">Tuyau_tls.</span>with_tls <span class="org-tuareg-font-lock-label">~key</span><span class="org-tuareg-font-lock-operator">:</span>sockaddr <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">TCP</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>

<p>
The composition gives to us 2 values:
</p>
<ul class="org-ul">
<li>the <i>type-witness</i> <code>sockaddr_and_tls_config : Unix.sockaddr *
  Tls.Config.client</code>. In fact, creation of a TCP + TLS connection is a bit more
complex than TCP. We need a <code>Tls.Config.client</code> which verify certificate
provided by the peer.</li>
<li>the <i>type-witness</i> <code>tcp_with_tls : Unix.file_descr with_tls</code>.</li>
</ul>

<p>
From that, we must provide an other resolver which give to us the <code>Tls.Config.client</code>:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">resolve_https</span><span class="org-variable-name"> domain_name</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-keyword">match</span> resolve_http domain_name <span class="org-keyword">with</span>
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-tuareg-font-lock-constructor">Some</span> sockaddr <span class="org-tuareg-font-lock-operator">-&gt;</span>
    <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">tls_config</span> <span class="org-tuareg-font-lock-operator">=</span>
      <span class="org-tuareg-font-lock-module">Tls.Config.</span>client <span class="org-tuareg-font-lock-label">~authenticator</span><span class="org-tuareg-font-lock-operator">:</span><span class="org-tuareg-font-lock-module">X509.Authenticator.</span>null <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">()</span></span> <span class="org-tuareg-font-lock-governing">in</span>
    <span class="org-tuareg-font-lock-constructor">Some</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span>sockaddr<span class="org-tuareg-font-lock-operator">,</span> tls_config<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
  <span class="org-tuareg-font-lock-operator">|</span> <span class="org-tuareg-font-lock-constructor">None</span> <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-constructor">None</span>

<span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">resolvers</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-module">Tuyau.</span>register_resolver <span class="org-tuareg-font-lock-label">~priority</span><span class="org-tuareg-font-lock-operator">:</span><span class="org-highlight-numbers-number">0</span> <span class="org-tuareg-font-lock-label">~key</span><span class="org-tuareg-font-lock-operator">:</span>sockaddr_and_tls_config
    resolve_https
    resolvers
</pre>
</div>

<p>
With the priority, we can enforce to try at the first time the TCP + TLS
transmission instead the TCP transmission - and by this way, prefer to use the
secure one.
</p>

<p>
Again, this code still appears outside the Git implementation. We are able to
fill Tuyau with a SSH implementation and fill the <code>resolvers</code> with a specific
SSH configuration (like a set of private key like <code>.ssh/config</code>).
</p>

<p>
In our example, we use <code>X509.Authenticator.null</code> but we can restrict the
<code>authenticator</code> to some internals certificates. Again, the way to resolve a
domain-name is on the responsibility of the user.
</p>
</div>

<div id="outline-container-orge4629ec" class="outline-4">
<h4 id="orge4629ec">Composition is not magic!</h4>
<div class="outline-text-4" id="text-orge4629ec">
<p>
Composition with TLS or something else is not magic. It seems easy when we
provide <code>with_tls</code> but we <b><b>wrote</b></b> the way to compose TLS with an other
protocol - where we handled <i>handshake</i>, etc.
</p>

<p>
The composition is, at the end, a <i>functor</i> which takes a <code>FLOW</code>:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">With_tls</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-variable-name">Flow </span><span class="org-tuareg-font-lock-operator">:</span><span class="org-type"> FLOW</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-governing">struct</span>
  <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">endpoint</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Flow.</span>endpoint <span class="org-tuareg-font-lock-operator">*</span> <span class="org-tuareg-font-lock-module">Tls.Config.</span>client
  <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">flow</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Flow.</span>endpoint <span class="org-tuareg-font-lock-operator">*</span> <span class="org-tuareg-font-lock-module">Tls.Engine.</span>state

  <span class="org-tuareg-font-lock-operator">...</span>
<span class="org-tuareg-font-lock-governing">end</span>
</pre>
</div>

<p>
We just hidden it with a nice function and play a bit with <a href="https://caml.inria.fr/pub/docs/manual-ocaml/firstclassmodules.html#s:first-class-modules">first-class modules</a>.
</p>
</div>
</div>
</div>

<div id="outline-container-orgb7815fd" class="outline-3">
<h3 id="orgb7815fd">More possibilities on the user-side</h3>
<div class="outline-text-3" id="text-orgb7815fd">
<p>
One other request about <code>Tuyau</code> is to be predictable by the kind of flow used.
Some maintainers want to enforce a secure flow such as SSH. In this case, of
course, the maintainer should be aware about the implementation - and link with
it.
</p>

<p>
The <code>resolve</code> function is much more complex than before on this way:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">resolver</span>
  <span class="org-tuareg-font-lock-operator">:</span>  resolvers
  <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-label">?key</span><span class="org-tuareg-font-lock-operator">:</span>'edn key
  <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-label">?protocol</span><span class="org-tuareg-font-lock-operator">:</span>'flow protocol
  <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">[</span></span> <span class="org-tuareg-font-lock-constructor">`host</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">]</span></span> <span class="org-tuareg-font-lock-module">Domain_name.</span>t <span class="org-tuareg-font-lock-operator">-&gt;</span> flow
</pre>
</div>

<p>
Optional arguments let the user to enforce a specific <i>endpoint</i><sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> or a
specific protocol (or both). When we advised to expose <code>val tcp :
Unix.file_descr Tuyau.protocol</code> before, it's for this case. Imagine an SSH
implementation where a <code>val ssh : SSH.t Tuyau.protocol</code> exists, the maintainer
can write:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">clone</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator">~</span><span class="org-variable-name">resolvers domain_name repository</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">payload</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Bytes.</span>create <span class="org-highlight-numbers-number">0x1000</span> <span class="org-tuareg-font-lock-governing">in</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-tuareg-font-lock-module">Tuyau_unix.</span><span class="org-tuareg-font-lock-constructor">Flow</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-variable-name">flow</span><span class="org-tuareg-font-lock-operator">,</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">(</span></span><span class="org-tuareg-font-lock-governing">module</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-module">Flow</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">)</span></span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> <span class="org-tuareg-font-lock-operator">=</span>
    <span class="org-tuareg-font-lock-module">Tuyau_unix.</span>resolve <span class="org-tuareg-font-lock-operator">~</span>resolvers <span class="org-tuareg-font-lock-label">~protocol</span><span class="org-tuareg-font-lock-operator">:</span>ssh domain_name <span class="org-tuareg-font-lock-governing">in</span>
  <span class="org-tuareg-font-lock-module">Flow.</span>send flow <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Fmt.</span>strf <span class="org-string">"# git-upload-pack /%s.git"</span> repository <span class="org-tuareg-font-lock-operator">;</span>
  <span class="org-tuareg-font-lock-module">Flow.</span>recv flow payload <span class="org-tuareg-font-lock-operator">;</span>
  <span class="org-tuareg-font-lock-operator">...</span> 
</pre>
</div>

<p>
By this way, we ensure to use SSH when we communicate to our peer.
</p>
</div>
</div>
</div>

<div id="outline-container-org2c012de" class="outline-2">
<h2 id="org2c012de">Conclusion</h2>
<div class="outline-text-2" id="text-org2c012de">
<p>
As we said, Tuyau and Conduit a complex problem when we should have an easy way
to start a <i>transmission</i> and be able to extend protocol implementations without
a static dependency at the library level.
</p>

<p>
Composition is done by the possibility to give a nice interface such as
<code>with_tls</code> with Tuyau. But, of course, it's not magic when maintainer of
TLS/WireGuard/Noise should provide a way to compose such layers with a given
<code>FLOW</code>.
</p>

<p>
Finally, it's hard to really understand the goal of Tuyau when, from the
library, it's hard to reach the global view over protocols, users and finally
the ecosystem. This article wants to give materials about that.
</p>
</div>

<div id="outline-container-org2ac6f64" class="outline-3">
<h3 id="org2ac6f64">Server-side</h3>
<div class="outline-text-3" id="text-org2ac6f64">
<p>
Tuyau provides something about the server-side which differs a lot from what
Conduit does but we should explain that into an other article.
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
: It's not really true when a transmission over HTTP must be <i>stateless</i>.
Smart over SSH differs too when it must expect a END-OF-LINE (<code>'\n'</code>) at the end
of each <i>packet</i> - this character is optional over TCP/IP.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
: by <i>HTTP endpoint</i>, we enforce the port <code>80</code>. Our UNIX TCP/IP flow is
not an HTTP flow. However, an HTTP client must be connected to the port <code>80</code>
over the TCP/IP protocol.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
: A <i>type-witness</i> <code>key</code> can be used and re-used with many protocols. We
can imagine a TCP/IP protocol and a UDP/IP protocol which use the same
<code>sockaddr</code> <i>type-witness</i>.
</p></div></div>


</div>
</div>]]></description>
  <link>https://blog.x25519.net/2020-02-27--tuyau.html</link>
  <pubDate>Thu, 27 Feb 2020 01:00:00 +0100</pubDate>
</item>
<item>
  <title>Functor, Application and magick!</title>
  <description><![CDATA[
</div><div class="post-date"><2020-02-17></div><p>
While I try to make an SMTP server in OCaml as an <i>unikernel</i>, I tried to deal
with <code>Set.Make</code>. Imagine a situation where you define your type <code>elt = string</code>
into a module <code>A</code> and you want to apply <code>Set.Make</code> inside the given module.
</p>

<div id="outline-container-org0d1d79b" class="outline-2">
<h2 id="org0d1d79b">Interface</h2>
<div class="outline-text-2" id="text-org0d1d79b">
<p>
Then, you would like to write a proper interface which describe result of your
<i>functor</i>. It should be easy than:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">elt</span> <span class="org-tuareg-font-lock-operator">=</span> string

<span class="org-tuareg-font-lock-governing">include</span> <span class="org-tuareg-font-lock-module">Set.S</span> <span class="org-tuareg-font-lock-governing">with type</span> <span class="org-type">elt</span> <span class="org-tuareg-font-lock-operator">=</span> elt
</pre>
</div>

<p>
But in my example, <code>Set.S</code> wants to (re)define <code>elt</code>. You probably miss the
<a href="https://caml.inria.fr/pub/docs/manual-ocaml/manual030.html#sec252">destructive substitution</a> of the type <code>elt</code>.
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">elt</span> <span class="org-tuareg-font-lock-operator">=</span> string

<span class="org-tuareg-font-lock-governing">include</span> <span class="org-tuareg-font-lock-module">Set.S</span> <span class="org-tuareg-font-lock-governing">with type</span> <span class="org-type">elt</span> <span class="org-tuareg-font-lock-operator">:=</span> elt
</pre>
</div>
</div>
</div>

<div id="outline-container-org8c46ac2" class="outline-2">
<h2 id="org8c46ac2">Implementation</h2>
<div class="outline-text-2" id="text-org8c46ac2">
<p>
The implementation will be more trickier. Indeed, we probably want to do
something like this:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">include</span> <span class="org-tuareg-font-lock-module">Set.Make</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">struct</span> <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> string <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">compare</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">String.</span>compare <span class="org-tuareg-font-lock-governing">end</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>

<p>
And, fortunately for you, this snippet should work. However, it starts to be
pretty incomprehensible when <code>type elt</code> is one of your type (<code>string</code> or
<code>String.t</code> exists outside the scope of your module). We can take this example:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">include</span> <span class="org-tuareg-font-lock-module">Set.Make</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">struct</span>
  <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">{</span></span> v <span class="org-tuareg-font-lock-operator">:</span><span class="org-type"> string </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">}</span></span>
<span class="org-type">  </span><span class="org-tuareg-font-lock-governing">let</span><span class="org-type"> compare </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">{</span></span><span class="org-type"> v</span><span class="org-tuareg-font-lock-operator">=</span><span class="org-type"> a</span><span class="org-tuareg-font-lock-operator">;</span><span class="org-type"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">}</span></span><span class="org-type"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">{</span></span><span class="org-type"> v</span><span class="org-tuareg-font-lock-operator">=</span><span class="org-type"> b</span><span class="org-tuareg-font-lock-operator">;</span><span class="org-type"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">}</span></span><span class="org-type"> </span><span class="org-tuareg-font-lock-operator">=</span><span class="org-type"> </span><span class="org-tuareg-font-lock-module">String.</span><span class="org-type">compare a b</span>
<span class="org-tuareg-font-lock-governing">end</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>

<p>
Into the interface, by side the redefinition of the type <code>elt</code>, nothing should
change. However, the compilation fails with:
</p>

<div class="org-src-container">
<pre class="src src-shell">$ ocamlc -c a.ml
Error: The implementation a.ml does not match the interface a.cmi:
       Type declarations do not match:
         <span class="org-builtin">type</span> elt
       is not included<span class="org-keyword"> in</span>
         <span class="org-builtin">type</span> <span class="org-variable-name">elt</span> = <span class="org-rainbow-delimiters-depth-1">{</span> v : string; <span class="org-rainbow-delimiters-depth-1">}</span>
</pre>
</div>

<p>
Indeed, we should have a definition of <code>elt</code> outside the <code>struct ... end</code>:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">elt</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">{</span></span> v <span class="org-tuareg-font-lock-operator">:</span> string <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">}</span></span>

<span class="org-tuareg-font-lock-governing">include</span> <span class="org-tuareg-font-lock-module">Set.Make</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">struct</span>
  <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> elt
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">compare</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">{</span></span> v<span class="org-tuareg-font-lock-operator">=</span> a<span class="org-tuareg-font-lock-operator">;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">}</span></span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">{</span></span> v<span class="org-tuareg-font-lock-operator">=</span> b<span class="org-tuareg-font-lock-operator">;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">}</span></span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">String.</span>compare a b
<span class="org-tuareg-font-lock-governing">end</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>

<p>
However, now, OCaml complains about a multiple definition of the type <code>elt</code>. May
be we can play more with the destructive substitution?
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">elt</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">{</span></span> v <span class="org-tuareg-font-lock-operator">:</span> string <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">}</span></span>

<span class="org-tuareg-font-lock-governing">include</span>
  <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Set.</span><span class="org-tuareg-font-lock-constructor">Make</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">(</span></span><span class="org-tuareg-font-lock-governing">struct</span>
     <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> elt
     <span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">compare</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-3">{</span></span> v<span class="org-tuareg-font-lock-operator">=</span> a<span class="org-tuareg-font-lock-operator">;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-3">}</span></span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-3">{</span></span> v<span class="org-tuareg-font-lock-operator">=</span> b<span class="org-tuareg-font-lock-operator">;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-3">}</span></span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">String.</span>compare a b
   <span class="org-tuareg-font-lock-governing">end</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">)</span></span>
   <span class="org-tuareg-font-lock-operator">:</span><span class="org-type"> </span><span class="org-tuareg-font-lock-module">Set.</span><span class="org-type">S </span><span class="org-tuareg-font-lock-governing">with type</span><span class="org-type"> elt </span><span class="org-tuareg-font-lock-operator">:=</span><span class="org-type"> elt</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgec230ee" class="outline-2">
<h2 id="orgec230ee">Just a tip</h2>
<div class="outline-text-2" id="text-orgec230ee">
<p>
And it's work! So I leave this trick here to help some people.
</p>
</div>
</div>
]]></description>
  <link>https://blog.x25519.net/2020-02-17--functor-magic.html</link>
  <pubDate>Mon, 17 Feb 2020 01:00:00 +0100</pubDate>
</item>
<item>
  <title>MirageOS compilation</title>
  <description><![CDATA[
</div><div class="post-date"><2020-02-08></div><p>
MirageOS is not only one software but many libraries and tools which want to
provide a good <i>user-experience</i> about developing a full operating system. By
this way, they want to solve many problems with patterns and designs used by the
core team. However, as I said in my previous article, documentation or materials
don't really exist about these details.
</p>

<p>
So let's start with one about the compilation of an <i>unikernel</i>.
</p>

<div id="outline-container-orgf9f10c8" class="outline-2">
<h2 id="orgf9f10c8">Abstraction, interface and <i>functor</i></h2>
<div class="outline-text-2" id="text-orgf9f10c8">
<p>
The biggest goal of MirageOS is to provide a set of <i>interfaces</i>. Go back to the
OCaml world, we separate two things, the implementation (<code>.ml</code>) and the
interface (<code>.mli</code>). An implementation can declare lot of things where an interface
wants to restrict access to some underlying functions/constants/variables.
</p>

<p>
The interface can <i>abstract</i> definition of type where, inside (into the
implementation), the underlying structure is well-known and outside, the ability
to construct the value must be done by described functions into the <code>.mli</code>.
</p>
</div>

<div id="outline-container-orge2b7c4f" class="outline-3">
<h3 id="orge2b7c4f">A simple module with its interface</h3>
<div class="outline-text-3" id="text-orge2b7c4f">
<div class="org-src-container">
<pre class="src src-ocaml" id="org68b8598"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> string

<span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">v</span><span class="org-variable-name"> x</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">String.</span>lowercase_ascii x
<span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">compare</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">String.</span>compare
</pre>
</div>

<div class="org-src-container">
<pre class="src src-ocaml" id="orga7bc764"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span>

<span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">v</span> <span class="org-tuareg-font-lock-operator">:</span> string <span class="org-tuareg-font-lock-operator">-&gt;</span> t
<span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">compare</span> <span class="org-tuareg-font-lock-operator">:</span> t <span class="org-tuareg-font-lock-operator">-&gt;</span> t <span class="org-tuareg-font-lock-operator">-&gt;</span> int
</pre>
</div>

<p>
In your example, our <code>type t</code> is a <code>string</code>. However. to make a <code>t</code>, we must use
<code>v</code> which applies <code>String.lowercase_ascii</code>. Then, we provide the <code>compare</code>
function to be able to make a <code>Set</code> or a <code>Map</code> of <code>t</code>. On that, we can express a
simple idea: 
</p>

<p>
&gt; a <i>field-name</i> is a <code>string</code> where the comparison of them is case-insensitive, such
&gt; as <code>Received</code> and <code>received</code> are equivalent.
</p>

<p>
Then, for any who wants to use this module, he must use <code>v</code> to <i>create</i> a
field-name and be able to use it with <code>compare</code>. Generally, we provide a <code>pp</code>
(Pretty-Printer) to debug, and the couple <code>to_string~/~of_string</code>.
</p>

<p>
But the point is to able, by the interface, to restrict the user about what he
can do and define about what he can rely when he uses such value.
</p>
</div>
</div>

<div id="outline-container-orge8cd67c" class="outline-3">
<h3 id="orge8cd67c">Trust only on the given interface</h3>
<div class="outline-text-3" id="text-orge8cd67c">
<p>
MirageOS did the choice to trust only on the interface. For us, a <i>device</i>, a
protocol or a server can be well defined by an interface. This is the purpose of
`mirage-types` which provides such things.
</p>

<p>
The key now is: because for each <i>artifact</i> we have, we use them with their
interfaces, how to compose them into on a specific computation?
</p>

<p>
This is the purpose of MirageOS: a tool to compose implementations (<code>.ml</code>)
according expected interfaces (<code>.mli</code>) and produce then a operating system (the
specific computation).
</p>
</div>
</div>
</div>

<div id="outline-container-org018d881" class="outline-2">
<h2 id="org018d881">A MirageOS project</h2>
<div class="outline-text-2" id="text-org018d881">
<p>
Indeed, the global idea of an <i>unikernel</i> is: develop the main computation of
your operating system and be able to abstract it over protocols, devices and, at
the end, <i>targets</i>.
</p>

<p>
Let's start to talk about the TCP/IP stack. Usually, on UNIX, we create a
<code>socket</code> and we use it to receive and send data. Then, the role of your
operating system is to handle it with your ethernet/wlan card.
</p>

<p>
We can abstract the idea of the <code>socket</code> by this interface:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span>
<span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">error</span>

<span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">recv</span> <span class="org-tuareg-font-lock-operator">:</span> t <span class="org-tuareg-font-lock-operator">-&gt;</span> bytes <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">[</span></span> <span class="org-tuareg-font-lock-constructor">`Eoi</span> <span class="org-tuareg-font-lock-operator">|</span> <span class="org-tuareg-font-lock-constructor">`Data</span> <span class="org-keyword">of</span> int <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-2">]</span></span><span class="org-tuareg-font-lock-operator">,</span> error<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> result
<span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">send</span> <span class="org-tuareg-font-lock-operator">:</span> t <span class="org-tuareg-font-lock-operator">-&gt;</span> string <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span>int<span class="org-tuareg-font-lock-operator">,</span> error<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> result
</pre>
</div>

<p>
Then, we can trust over this interface to represent the way to send and receive
data. Of course, at this stage, we don't know details about implementation - and
this is what we want.
</p>

<div class="org-src-container">
<pre class="src src-ocaml" id="orga720e64"><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">Make</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-variable-name">Flow </span><span class="org-tuareg-font-lock-operator">:</span><span class="org-type"> FLOW</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-governing">struct</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">start</span><span class="org-variable-name"> flow</span> <span class="org-tuareg-font-lock-operator">=</span>
    <span class="org-tuareg-font-lock-module">Flow.</span>send flow <span class="org-string">"Hello World!"</span>
<span class="org-tuareg-font-lock-governing">end</span>
</pre>
</div>

<p>
The abstraction is done. Now, we have our main computation which can be use with
something implements our <code>socket</code>. 
</p>

<p>
And it comes with another tool, `Functoria` to orchestrate, depending on the
target, which implementation will be use to apply the final <i>functor</i>. For UNIX,
we will apply the <i>functor</i> with `mirage-tcpip.stack-socket` and for Solo5/Xen,
we apply with `mirage-tcpip.stack-direct`.
</p>
</div>
</div>

<div id="outline-container-org28c7113" class="outline-2">
<h2 id="org28c7113"><i>functor</i> everywhere</h2>
<div class="outline-text-2" id="text-org28c7113">
<p>
<i>Functorize</i> the code seems to be a good idea where:
</p>
<ul class="org-ul">
<li>the cost at the <i>runtime</i> is minimal</li>
<li>abstraction is powerful (we can define new types, constraints, etc.)</li>
</ul>
</div>
</div>

<div id="outline-container-orgfaab3ef" class="outline-2">
<h2 id="orgfaab3ef">An example</h2>
<div class="outline-text-2" id="text-orgfaab3ef">
<p>
We can show what is really going on about MirageOS about a little example on the
abstraction of the `Console` to be able to write something. Imagine this <i>unikernel</i>:
</p>

<div class="org-src-container">
<pre class="src src-ocaml" id="org8a73344"><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-governing">type</span> <span class="org-tuareg-font-lock-module">CONSOLE</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-governing">sig</span>
  <span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span>

  <span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">endline</span> <span class="org-tuareg-font-lock-operator">:</span> t <span class="org-tuareg-font-lock-operator">-&gt;</span> string <span class="org-tuareg-font-lock-operator">-&gt;</span> unit
<span class="org-tuareg-font-lock-governing">end</span>

<span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">Make</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-variable-name">Console </span><span class="org-tuareg-font-lock-operator">:</span><span class="org-type"> CONSOLE</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-governing">struct</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">start</span><span class="org-variable-name"> console</span> <span class="org-tuareg-font-lock-operator">=</span>
    <span class="org-tuareg-font-lock-module">Console.</span>endline console <span class="org-string">"Hello World!"</span>
<span class="org-tuareg-font-lock-governing">end</span>
</pre>
</div>

<p>
This <i>unikernel</i> expects an implementation of the <i>Console</i>. The idea behind the
<i>Console</i> is to be able to write something on it. In MirageOS, the interface
should provide something to represent the console (the <code>type t</code>) and what you
can do with it (the function <code>val endline</code>).
</p>

<p>
Then, usually, <code>Functoria</code> will generate a <code>main.ml</code> according the chosen target
and apply our <i>functor</i> with the right implementation. But let's talk about
implementations.
</p>
</div>

<div id="outline-container-org98c5166" class="outline-3">
<h3 id="org98c5166">Implementations</h3>
<div class="outline-text-3" id="text-org98c5166">
<p>
We probably should have 2 implementations:
</p>
<ul class="org-ul">
<li>an UNIX implementation which will use the <i>syscall</i> <code>write</code></li>
<li>a <i>standalone</i> implementation which should work on any targets (like Solo5) -
and it should depend only on the <i>caml</i> runtime</li>
</ul>

<div class="org-src-container">
<pre class="src src-ocaml" id="org9ae4159"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Unix.</span>file_descr

<span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">endline</span><span class="org-variable-name"> fd str</span> <span class="org-tuareg-font-lock-operator">=</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">_</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Unix.</span>write_substring fd str <span class="org-highlight-numbers-number">0</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">String.</span>length str<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span> <span class="org-tuareg-font-lock-governing">in</span>
  <span class="org-tuareg-font-lock-governing">let</span> <span class="org-variable-name">_</span> <span class="org-tuareg-font-lock-operator">=</span> <span class="org-tuareg-font-lock-module">Unix.</span>write_substring fd <span class="org-string">"\n"</span> <span class="org-highlight-numbers-number">0</span> <span class="org-highlight-numbers-number">1</span> <span class="org-tuareg-font-lock-governing">in</span>
  <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-tuareg-font-double-colon">;;</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-ocaml" id="orgfbdec12"><span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> out_channel

<span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">endline</span><span class="org-variable-name"> oc str</span> <span class="org-tuareg-font-lock-operator">=</span>
  output_string oc str <span class="org-tuareg-font-lock-operator">;</span>
  output_string oc <span class="org-string">"\n"</span>
<span class="org-tuareg-font-double-colon">;;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc418d87" class="outline-3">
<h3 id="orgc418d87">Orchestration</h3>
<div class="outline-text-3" id="text-orgc418d87">
<p>
As I said, then, <code>Functoria</code> will take the place and will generate a <code>main.ml</code>
which will:
</p>
<ul class="org-ul">
<li>apply <code>Unikernel.Make</code></li>
<li>call the <code>start</code> function with the representation of the <i>Console</i></li>
</ul>

<p>
Concretely, this file appears when you do <code>mirage configure</code> where you can
specify the target. So, imagine we want to use the UNIX target (the default
one), <code>Functoria</code> will generate:
</p>

<div class="org-src-container">
<pre class="src src-ocaml" id="orga4a7838"><span class="org-tuareg-font-lock-governing">include</span> <span class="org-tuareg-font-lock-module">Unikernel.Make</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-module">Console_unix</span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>

<span class="org-tuareg-font-lock-governing">let</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">()</span></span> <span class="org-tuareg-font-lock-operator">=</span> start <span class="org-tuareg-font-lock-module">Unix.</span>stdout
</pre>
</div>
</div>
</div>

<div id="outline-container-org884ae82" class="outline-3">
<h3 id="org884ae82">Compilation</h3>
<div class="outline-text-3" id="text-org884ae82">
<p>
The compilation can be separated into 2 steps where we compile object files
first and we do the link according the target:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ ocamlopt -c unikernel.ml
$ ocamlopt -c console_unix.ml
$ ocamlopt -c main.ml
</pre>
</div>

<div class="org-src-container">
<pre class="src src-sh">$ ocamlopt -o main -c unix.cmxa <span class="org-sh-escaped-newline">\</span>
  console_unix.cmx unikernel.cmx main.cmx
</pre>
</div>

<p>
We can see that the most specific command according the target is the link step
where <code>unix.cmxa</code> appears. Of course, for another target like Solo5, we will use
<code>console_caml.ml</code>. The link step will be a bit complex where we will produce a
<code>main.o</code> (with <code>-output-obj</code> option). Then, the <code>mirage</code> tool will properly call
<code>ld</code> with a specific link script according the target.
</p>
</div>
</div>

<div id="outline-container-org401b316" class="outline-3">
<h3 id="org401b316">Results</h3>
<div class="outline-text-3" id="text-org401b316">
<p>
Of course, all of this process is done by the <code>mirage</code> tool but it's interesting
to understand what is going on when we do the usual:
</p>
<ul class="org-ul">
<li><code>mirage configure</code></li>
<li><code>mirage build</code></li>
</ul>
</div>
</div>

<div id="outline-container-orgf7f6058" class="outline-3">
<h3 id="orgf7f6058">Implementation according the target</h3>
<div class="outline-text-3" id="text-orgf7f6058">
<p>
For some others targets - much more specials targets - implementation can
directly use the <i>syscall</i> available on the target (like <code>solo5_console_write</code>)
with <code>external</code>.
</p>

<div class="org-src-container">
<pre class="src src-ocaml" id="org9724c31"><span class="org-tuareg-font-lock-governing">external</span> <span class="org-function-name">solo5_console_write</span> <span class="org-tuareg-font-lock-operator">:</span> string <span class="org-tuareg-font-lock-operator">-&gt;</span> unit <span class="org-tuareg-font-lock-operator">=</span> <span class="org-string">"solo5_console_write"</span>

<span class="org-tuareg-font-lock-governing">type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> unit

<span class="org-tuareg-font-lock-governing">let</span> <span class="org-function-name">endline</span><span class="org-variable-name"> </span><span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">()</span></span><span class="org-variable-name"> str</span> <span class="org-tuareg-font-lock-operator">=</span>
  solo5_console_write str <span class="org-tuareg-font-lock-operator">;</span>
  solo5_console_write <span class="org-string">"\n"</span>
<span class="org-tuareg-font-double-colon">;;</span>
</pre>
</div>

<p>
As you can see, we still continue to follow the interface <code>CONSOLE</code> even if the
representation of <code>t</code> is <code>unit</code> (so, nothing).
</p>
</div>
</div>
</div>

<div id="outline-container-orgc146929" class="outline-2">
<h2 id="orgc146929">The power of the abstraction</h2>
<div class="outline-text-2" id="text-orgc146929">
<p>
The goal of all of that is to be able to switch easily from an implementation to
another one - like, switch from <code>socket</code> given by the Unix module to our own
implementation of the TCP/IP stack.
</p>

<p>
Finally, the end user can completely discard details about underlying
implementations used for his purpose and he can focus only on what he wants - of
course, he must trust on what he uses. But if he does correctly the job, then
others users can go further by composition and <i>hijack</i> underlying
implementations by something else without any update of the main computation.
</p>

<p>
An example of that is to make a website and plug without any headache a TLS
support. It should only be a composition between the TCP/IP flow with TLS to
emit the same abstraction as before:
</p>

<div class="org-src-container">
<pre class="src src-ocaml"><span class="org-tuareg-font-lock-governing">val</span> <span class="org-function-name">with_tls</span>
  <span class="org-tuareg-font-lock-operator">:</span>  <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">Flow</span> <span class="org-tuareg-font-lock-governing">with type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> 'flow<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
  <span class="org-tuareg-font-lock-operator">-&gt;</span> <span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">(</span></span><span class="org-tuareg-font-lock-governing">module</span> <span class="org-tuareg-font-lock-module">Flow</span> <span class="org-tuareg-font-lock-governing">with type</span> <span class="org-type">t</span> <span class="org-tuareg-font-lock-operator">=</span> 'flow <span class="org-tuareg-font-lock-operator">*</span> <span class="org-tuareg-font-lock-module">Tls.</span>t<span class="org-tuareg-font-lock-operator"><span class="org-rainbow-delimiters-depth-1">)</span></span>
</pre>
</div>

<p>
Globally, each piece of your <i>unikernel</i> can be replaced by something else (more
fast, more secure, etc.). MirageOS is not a monolithic software at end, it's a
real framework to build your operating system.
</p>
</div>
</div>
]]></description>
  <link>https://blog.x25519.net/2020-02-07--mirageos-compilation.html</link>
  <pubDate>Sat, 08 Feb 2020 01:00:00 +0100</pubDate>
</item>
<item>
  <title>Hello World!</title>
  <description><![CDATA[
</div><div class="post-date"><2020-02-06></div><p>
Hello World! I'm Romain Calascibetta and this is my blog/notes about what I do with
my computer. It's mostly about MirageOS stuff where I did some work on it and I
want to use it for everything.
</p>

<p>
Currently, I took a <i>bare-metal</i> server to be able to virtualize my unikernel with
KVM. This server uses currently 4 unikernels:
</p>

<ul class="org-ul">
<li>an intern DNS resolver</li>
<li>a primary DNS server for x25519.net</li>
<li>a paste service <a href="https://paste.x25519.net/">pasteur</a></li>
<li>this blog</li>
</ul>

<p>
Of course, I'm not an <i>admin-sys</i> and even if I trie to use my work, I suspect
that the way to deploy my unikernels is not the best. But, eh, it's work.
</p>

<div id="outline-container-orgb80e4b1" class="outline-2">
<h2 id="orgb80e4b1">The purpose of this blog</h2>
<div class="outline-text-2" id="text-orgb80e4b1">
<p>
It's hard to follow resources about MirageOS like <i>"how to make an unikernel"</i>
or <i>"how to plug a data-store"</i>, etc. The MirageOS ecosystem is quite large and
sporadic. My goal is not to provide <b>the</b> way to make your unikernel but try to
describe some ways.
</p>
</div>
</div>

<div id="outline-container-org2e6bde2" class="outline-2">
<h2 id="org2e6bde2">MirageOS &amp; OCaml</h2>
<div class="outline-text-2" id="text-org2e6bde2">
<p>
Of course, as an OCaml developper, I will talk about OCaml mostly and what we
currently do with this language and MirageOS.
</p>
</div>
</div>

<div id="outline-container-org2c0ea7e" class="outline-2">
<h2 id="org2c0ea7e">Some others notes</h2>
<div class="outline-text-2" id="text-org2c0ea7e">
<p>
And because it's my blog, I can write what I want. Excuse me for my english, I'm
french and it can be hard for me to translate all of my mind in english.
</p>
</div>
</div>
]]></description>
  <link>https://blog.x25519.net/2020-02-06--hello-world.html</link>
  <pubDate>Thu, 06 Feb 2020 01:00:00 +0100</pubDate>
</item>
</channel>
</rss>
